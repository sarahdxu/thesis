#GDG
alpha<-ggplot(data=data, aes(data$alpha)) + geom_histogram(aes(y=100*(..count..)/sum(..count..)), binwidth=0.05)+
scale_x_continuous(breaks=seq(0, 1, by=0.1)) +
#ylim(c(0,28))+
labs(x="Alpha", y="Percent") +
ggtitle("Panel A: Alpha")
ggsave("~/Desktop/thesis/paper/images/alpha.pdf", width=11, height=8.5)
#data$rho1[data$rho1>1]<-NA
data1<-data
data1$rho1<-data1$rho
data1$rho1[data1$rho1<(-1)]<-(-1.25)
#data2<-data[data$rho>1,]
rho<-ggplot(data=data1, aes(x=rho1)) +
geom_histogram(aes(x=rho1, y=100*(..count..)/sum(..count..)), binwidth=0.05)+
#geom_histogram(aes(x=data1$rho1[data1$rho1==-1.25], y=100*(..count..)/sum(..count..)),binwidth=0.05)+
scale_x_continuous(breaks=seq(-1, 1, by=0.1)) +
labs(x="Rho", y="Percent") +
ggtitle("Panel B: Rho")
ggsave("~/Desktop/thesis/paper/images/rho.pdf", width=11, height=8.5)
# data2<-data[data$rho<=1 & data$rho>=-1,]
# plot(data2$rho, data2$alpha)
# fig<-ggplot(data2, aes(x=rho, y=alpha)) +
#   geom_point(size=2) + labs(x="Rho", y="Alpha") +
#   ggtitle("Panel C: Scatterplot of CES Parameters")
# sigma<-ggplot(data=data, aes(x=data$sigma)) +
#   geom_histogram(aes(x=data$sigma, y=100*(..count..)/sum(..count..)), binwidth=1)+
#   #geom_histogram(aes(x=data1$rho1[data1$rho1==-1.25], y=100*(..count..)/sum(..count..)),binwidth=0.05)+
#   scale_x_continuous(breaks=seq(-1, 1, by=0.1)) +
#   ylim(c(0,25))+
#   labs(x="Sigma", y="Percent") +
#   ggtitle("Panel C: Sigma")
pdf("~/Desktop/thesis/paper/images/Figure2a.pdf",width=11,height=8.5)
grid.arrange(alpha, rho, nrow=2)
dev.off()
#Spearmans p
dat<-data[,c("alpha", "UG1", "UG2", "TG1", "TG2", "PGG", "SRAtotal")]
library(xtable)
library(Hmisc)
corstars <-function(x, method=c("pearson", "spearman"), #removeTriangle=c("upper", "lower"),
result=c("none", "html", "latex")){
#Compute correlation matrix
require(Hmisc)
x <- as.matrix(x)
correlation_matrix<-rcorr(x, type=method[1])
R <- correlation_matrix$r # Matrix of correlation coeficients
p <- correlation_matrix$P # Matrix of p-value
## Define notions for significance levels; spacing is important.
#mystars <- ifelse(p < .0001, "****", ifelse(p < .001, "*** ", ifelse(p < .01, "**  ", ifelse(p < .05, "*   ", "    "))))
mystars <- ifelse(p < .01, "***", ifelse(p < .05, "**", ifelse(p<.1, "*", " ")))
## trunctuate the correlation matrix to two decimal
R <- format(round(cbind(rep(-1.11, ncol(x)), R), 2))[,-1]
## build a new matrix that includes the correlations with their apropriate stars
Rnew <- matrix(paste(R, mystars, sep=""), ncol=ncol(x))
diag(Rnew) <- paste(diag(R), " ", sep="")
rownames(Rnew) <- colnames(x)
colnames(Rnew) <- paste(colnames(x), "", sep="")
#   ## remove upper triangle of correlation matrix
#   if(removeTriangle[1]=="upper"){
#     Rnew <- as.matrix(Rnew)
#     Rnew[upper.tri(Rnew, diag = TRUE)] <- ""
#     Rnew <- as.data.frame(Rnew)
#   }
#
#   ## remove lower triangle of correlation matrix
#   else if(removeTriangle[1]=="lower"){
#     Rnew <- as.matrix(Rnew)
#     Rnew[lower.tri(Rnew, diag = TRUE)] <- ""
#     Rnew <- as.data.frame(Rnew)
#   }
#
## remove last column and return the correlation matrix
Rnew<-as.matrix(Rnew)
Rnew<-as.data.frame(Rnew)
Rnew <- cbind(Rnew[1:length(Rnew)])
if (result[1]=="none") return(Rnew)
else{
if(result[1]=="html") print(xtable(Rnew), type="html")
else print(xtable(Rnew), type="latex")
}
}
corstars(dat, method="pearson", result="latex")
dat1<-data[,c("alpha", "UG1", "UG2", "TG1", "TG2", "PGG", "SRAtotal", "SRAmoney")]
corstars(dat1, method="pearson", result="latex")
# regression
data$donations1<-data$donations
data$donations<-log(data$donations)
data$donations[data$donations==-Inf]<-NA
summary(data$donations)
hist(data$donations)
hist(data$donations1)
model1<-lm(donations~alpha, data=data)
model2<-lm(donations~rho, data=data)
model3<-lm(donations~UG1, data=data)
model4<-lm(donations~UG2, data=data)
model5<-lm(donations~TG1, data=data)
model6<-lm(donations~TG2, data=data)
model7<-lm(donations~PGG, data=data)
model8<-lm(donations~alpha+rho+UG1+UG2+TG1+TG2+PGG, data=data)
model9<- lm(donations~SRAtotal, data=data)
model10<-lm(donations~SRAmoney, data=data)
model11 <- lm(donations ~ alpha +rho+ UG1 + UG2 + TG1 + TG2 + PGG + SRAtotal, data=data)
model12 <- lm(donations ~ alpha +rho+ UG1 + UG2 + TG1 + TG2 + PGG + SRAmoney, data=data)
stargazer(model1, model2, model3, model4, model5, model6,model7,model8,model9, model10, model11,model12,type="latex",
dep.var.labels=c("Donations"),
covariate.labels=c("Alpha", "Rho","UG1", "UG2", "TG1",
"Reciprocity", "PGG", "SRAtotal", "SRAmoney"))
m<-vglm(donations~alpha, data=data, tobit(lower=0, upper=50))
summary(m)
t<-censReg(donations1 ~ alpha+rho+UG1+UG2+TG1+TG2+PGG, data=data, left=0,right=50)
#t<-censReg(donations1 ~ SRAmoney, data=data, right=50)
summary(t)
t<-tobit(donations ~ rho, data=data, left=0, right=50)
install.packages("AER")
library(AER)
mse<-mean(t$df.residual^2)
summary(t)
fm <- t
fm0 <- update(fm, . ~ 1)
1 - as.vector(logLik(fm)/logLik(fm0))
stargazer(model8, model9, model10, model11, type="latex",
dep.var.labels=c("Donations"),
covariate.labels=c("Alpha", "UG1", "UG2", "TG1",
"Reciprocity", "PGG", "SRAtotal", "SRAmoney"))
model12<-glm(donated~alpha, data=data)
pR2(model12)
model13<-glm(donated~rho,data=data)
pR2(model13)
model14<-glm(donated~UG1, data=data)
pR2(model14)
model15<-glm(donated~UG2, data=data)
pR2(model15)
model16<-glm(donated~TG1, data=data)
pR2(model16)
model17<-glm(donated~TG2, data=data)
pR2(model17)
model18<-glm(donated~PGG, data=data)
pR2(model18)
model19<-glm(donated~alpha+rho+UG1+UG2+TG1+TG2+PGG, data=data)
pR2(model19)
model20<- glm(donated~SRAtotal, data=data)
pR2(model20)
model21<-glm(donated~SRAmoney, data=data)
pR2(model21)
model22 <- glm(donated ~ alpha +rho+ UG1 + UG2 + TG1 + TG2 + PGG + SRAtotal, data=data)
pR2(model22)
model23 <- glm(donated ~ alpha+rho + UG1 + UG2 + TG1 + TG2 + PGG + SRAmoney, data=data)
pR2(model23)
summary(model19)
stargazer(model12, model13, model14, model15, model16, model17,model18,model19,model20,model21,model22,model23, type="latex",
dep.var.labels=c("Donated"),
covariate.labels=c("Alpha", "Rho","UG1", "UG2", "TG1",
"Reciprocity", "PGG","SRAtotal", "SRAmoney"))
stargazer(model19, model20, model21, model22,type="latex",
dep.var.labels=c("Donated"),
covariate.labels=c("Alpha", "UG1", "UG2", "TG1",
"Reciprocity", "PGG", "SRAtotal", "SRAmoney"))
pR2(model22)
mse1 <- mean(model1$residuals^2)
mse2 <- mean(model2$residuals^2)
mse3 <- mean(model3$residuals^2)
mse4 <- mean(model4$residuals^2)
mse5 <- mean(model5$residuals^2)
mse6<-mean(model6$residuals^2)
mse7<-mean(model7$residuals^2)
mse8<-mean(model8$residuals^2)
mse9<-mean(model9$residuals^2)
mse10<-mean(model10$residuals^2)
mse11<-mean(model11$residuals^2)
mse12<-mean(model12$residuals^2)
mse13<-mean(model13$residuals^2)
mse14<-mean(model14$residuals^2)
mse15<-mean(model15$residuals^2)
mse16<-mean(model16$residuals^2)
mse17<-mean(model17$residuals^2)
mse18<-mean(model18$residuals^2)
mse19<-mean(model19$residuals^2)
mse20<-mean(model20$residuals^2)
mse21<-mean(model21$residuals^2)
mse22<-mean(model22$residuals^2)
#Best subset model selection with R
data1<-data[,c("donations", "alpha","rho", "sigma", "UG1", "UG2", "TG1", "TG2","avgreturn","PGG",
"SRA1", "SRA2","SRA3", "SRA4", "SRA5", "SRA6", "SRA7", "SRA8", "SRA9", "SRA10",
"SRAtotal", "SRAmoney")]
data2<-data[,c("donations", "alpha","UG1", "UG2", "TG1", "TG2","avgreturn","PGG",
"SRA1", "SRA2","SRA3", "SRA4", "SRA5", "SRA6", "SRA7", "SRA8", "SRA9", "SRA10",
"SRAtotal", "SRAmoney")]
data3<-data[,c("donations", "alpha","UG1", "UG2", "TG1", "TG2","avgreturn","PGG",
"SRAtotal", "SRAmoney")]
data4<-data[,c("donated", "alpha","UG1", "UG2", "TG1", "TG2","avgreturn","PGG",
"SRAtotal", "SRAmoney")]
data5<-data[,c("donated", "alpha","rho", "sigma", "UG1", "UG2", "TG1", "TG2","avgreturn","PGG",
"SRA1", "SRA2","SRA3", "SRA4", "SRA5", "SRA6", "SRA7", "SRA8", "SRA9", "SRA10",
"SRAtotal", "SRAmoney")]
#continuous
regsubsets.out<-regsubsets(donations~alpha+rho+UG1+UG2+TG1+TG2+avgreturn+PGG+
SRA1+SRA2+SRA3+SRA4+SRA5+SRA6+SRA7+SRA8+SRA9+SRA10,#+
#SRAtotal+SRAmoney,
data=data,
nbest=1,
nvmax=NULL,
force.in=NULL, force.out=NULL,
method="exhaustive")
summary.out<-summary(regsubsets.out)
as.data.frame(summary.out$outmat)
plot(regsubsets.out,scale="adjr2",main="Adjusted R2")
which.max(summary.out$adjr2)
summary.out$which[6,]
best.model<-lm(donations~rho+SRA3+SRA4+SRA5+SRA6+SRA10,data=data)
best.model<-vglm(donations~rho+SRA3+SRA4+SRA5+SRA6+SRA10,data=data,
tobit(Lower=0,Upper=50))
summary(best.model)
stargazer(best.model,type="latex",
dep.var.labels=c("Donations"),
covariate.labels=c("Rho", "SRA3", "SRA4", "SRA5",
"SRA6", "SRA10"))
summary(best.model)
#logistic
install.packages("bestglm")
library(bestglm)
lbw.for.logistic<-within(data5, {
y<-donated
sigma<-NULL
donated<-NULL
SRAtotal<-NULL
SRAmoney<-NULL
#   SRA1<-NULL
#   SRA2<-NULL
#   SRA3<-NULL
#   SRA4<-NULL
#   SRA5<-NULL
#   SRA6<-NULL
#   SRA7<-NULL
#   SRA8<-NULL
#   SRA9<-NULL
#   SRA10<-NULL
})
res.bestglm<-
bestglm(Xy=lbw.for.logistic,
family=gaussian,
IC="AIC",
method="exhaustive")
res.bestglm$BestModels
best.model.log1<-glm(donated~SRA3+SRA4+SRA8+SRA10,data=data)
best.model.log2<-glm(donated~SRA3+SRA4+SRA7+SRA8+SRA10,data=data)
best.model.log3<-glm(donated~alpha+SRA3+SRA4+SRA8+SRA10,data=data)
best.model.log4<-glm(donated~alpha+SRA3+SRA4+SRA7+SRA8+SRA10,data=data)
best.model.log5<-glm(donated~UG2+SRA3+SRA4+SRA8+SRA10,data=data)
summary(best.model.log)
library(pscl)
pR2(best.model.log5)
best.subset<-regsubsets(y~.,lbw.for.logistic)
best.subset.summary<-summary(best.subset)
best.subset.summary$outmat
best.subset.by.cp<-which.min(best.subset.summary$cp)
best.subset.by.cp
stargazer(best.model.log3, best.model.log4, best.model.log5, best.model.log1,
best.model.log2, type="latex",
dep.var.labels=c("Donated"),
covariate.labels=c("alpha", "UG2", "SRA3", "SRA4", "SRA8", "SRA10"))
pR2(best.model.log2)
lbw.for.glm<-within(data1, {
y<-donations
sigma<-NULL
donations<-NULL
SRAtotal<-NULL
SRAmoney<-NULL
#   SRA1<-NULL
#   SRA2<-NULL
#   SRA3<-NULL
#   SRA4<-NULL
#   SRA5<-NULL
#   SRA6<-NULL
#   SRA7<-NULL
#   SRA8<-NULL
#   SRA9<-NULL
#   SRA10<-NULL
})
summary(lbw.for.glm$y)
lbw.for.glm<-na.omit(lbw.for.glm)
res.best.glm<-
bestglm(Xy=lbw.for.glm,
family=gaussian,
IC="AIC",
method="exhaustive")
summary(lbw.for.glm$y)
res.best.glm$BestModels
best.model.lm1<-vglm(donations~rho,data=data, tobit(Lower=0,Upper=50))
summary(censReg(donations~rho, data=data, left=0, right=50))
best.model.lm1<-lm(donations~UG1+TG2+SRA3+SRA4+SRA5+SRA6, data=data)
best.model.lm2<-lm(donations~UG1+UG2+TG2+SRA3+SRA4+SRA5+SRA6, data=data)
best.model.lm3<-lm(donations~UG1+TG2+SRA1+SRA3+SRA4+SRA5+SRA6, data=data)
best.model.lm4<-lm(donations~UG1+TG2+PGG+SRA3+SRA4+SRA5+SRA6, data=data)
best.model.lm5<-lm(donations~UG1+TG1+TG2+PGG+SRA3+SRA4+SRA5+SRA6, data=data)
stargazer(best.model.lm2, best.model.lm4, best.model.lm5, best.model.lm1,
best.model.lm3,type="latex",
dep.var.labels=c("Log(Donations)"),
covariate.labels=c("UG1","UG2", "TG1", "TG2","PGG", "SRA1", "SRA3", "SRA4", "SRA5", "SRA6"))
t<-tobit(donations~rho,data=data,left=0,right=50)
summary(t)
fm <- t
fm0 <- update(fm, . ~ 1)
1 - as.vector(logLik(fm)/logLik(fm0))
library(VGAM)
library(censReg)
summary(best.model.lm)
m<-lm(donations~rho,data=data)
stargazer(m, type="latex",
dep.var.labels=c("Donations"),
covariate.labels=c("Rho"))
summary(best.model.log)
library(leaps)
best.subset<-regsubsets(y~.,lbw.for.glm)
best.subset.summary<-summary(best.subset)
best.subset.summary$outmat
best.subset.by.cp<-which.min(best.subset.summary$cp)
best.subset.by.cp
# install.packages("glmulti")
# library(glmulti)
# install.packages("rJava")
# library(rJava)
# glmulti.lm.out<-glmulti(donations~alpha+rho+UG1+UG2+TG1+TG2+avgreturn+PGG+
#           SRA1+SRA2+SRA3+SRA4+SRA5+SRA6+SRA7+SRA8+SRA9+SRA10+
#           SRAtotal+SRAmoney,data=data,
#         level=1,
#         method="h",
#         crit="aic",
#         confsetsize=5,
#         plotty=F,report=F,
#         fitfunction="lm")
pairs(data1)
cor(data1)
install.packages("leaps")
library(leaps)
#best subset continuous
m<-vglm(donations~alpha+ UG1 + UG2 + TG1 + TG2 + PGG + SRAmoney,
tobit(Lower=0, Upper=50),data=dat)
best.subset<-regsubsets(donations~., data1)
best.subset.summary<-summary(best.subset)
best.subset.summary$outmat
best.subset.by.adjr2<-which.max(best.subset.summary$adjr2)
best.subset.by.adjr2
best.subset.by.bic <- which.min(best.subset.summary$bic)
best.subset.by.bic
best.subset.by.cp <- which.min(best.subset.summary$cp)
best.subset.by.cp
#best subset binary
best.subset<-regsubsets(donated~., data5, nbest=1)
best.subset.summary<-summary(best.subset)
best.subset.summary$outmat
best.subset.by.adjr2<-which.max(best.subset.summary$adjr2)
best.subset.by.adjr2
best.subset.by.bic <- which.min(best.subset.summary$bic)
best.subset.by.bic
best.subset.by.cp <- which.min(best.subset.summary$cp)
best.subset.by.cp
#continuous forward/backwards/stepwise
#forward selection
#null=vglm(donations~1,data=data1,tobit(Lower=0, Upper=50))
#full=vglm(donations~alpha+rho+sigma+UG1+UG2+TG1+TG2+avgreturn+PGG+
#SRA1+SRA2+SRA3+SRA4+SRA5+SRA6+SRA7+SRA8+SRA9+SRA10+
#SRAtotal+SRAmoney,data=data1,tobit(Lower=0,Upper=50))
null=lm(donations~1, data=data1)
full=lm(donations~., data=data1)
step(null, scope=list(lower=null, upper=full), direction="forward")
#backwards selection
step(full, data=data2, direction="backward")
#stepwise regression
step(null, scop=list(upper=full), data=data2, direction="both")
#binary forward/backwards/stepwise
#forward selection
null=glm(donated~1, data=data5)
full=glm(donated~., data=data5)
step(null, scope=list(lower=null, upper=full), direction="forward")
#backwards selection
step(full, data=data5, direction="backward")
#stepwise regression
step(null, scope=list(upper=full), data=data5, direction="both")
dat<-data[,c("donated", "alpha", "rho", "UG1", "UG2",
"TG1", "TG2", "avgreturn", "PGG", "SRA1", "SRA2",
"SRA3", "SRA4", "SRA5", "SRA6", "SRA7", "SRA8", "SRA9", "SRA10")]
null=glm(donated~1, data=dat)
null
full=glm(donated~., data=dat)
full
step(null,scope=list(upper=full),data=dat,
direction="both")
dat<-data[,c("donations", "alpha", "rho", "UG1", "UG2",
"TG1", "TG2", "avgreturn", "PGG", "SRA1", "SRA2",
"SRA3", "SRA4", "SRA5", "SRA6", "SRA7", "SRA8", "SRA9", "SRA10")]
null=lm(donations~1, data=dat)
null
full=vglm(donations~alpha+rho+UG1+UG2+TG1+TG2+avgreturn+PGG+
SRA1+SRA2+SRA3+SRA4+SRA5+SRA6+SRA7+SRA8+SRA9+SRA10,
data=dat, tobit(Lower=0, Upper=50))
full=lm(donations~.,data=dat)
full
step(null,scope=list(upper=full),data=dat,
direction="both")
summary(vglm(donations~rho,data=data,
tobit(Lower=0,Upper=50)))
summary(censReg(donations~rho, data=dat, left=0, right=50))
#ridge/lasso
install.packages("glmnet")
library(glmnet)
x<-model.matrix(donations~., data1)[,-1]
y<-data1$donations
cv.out<-cv.glmnet(x,y,alpha=1,type.measure="mse")
lambda_min<-cv.out$lambda.min
lambda_1se<-cv.out$lambda.1se
coef(cv.out,s=lambda_min)
coef(cv.out,s=lambda_1se)
dat<-data[,c("donated", "alpha", "rho", "UG1", "UG2",
"TG1", "TG2", "avgreturn", "PGG", "SRA1", "SRA2",
"SRA3", "SRA4", "SRA5", "SRA6", "SRA7", "SRA8", "SRA9", "SRA10")]
dat$donated<-as.factor(dat$donated)
xfactors<-model.matrix(donated~alpha+rho+UG1+UG2+
TG2+TG2+avgreturn+PGG+SRA1+SRA2+SRA3+
SRA4+SRA5+SRA6+SRA7+SRA8+SRA9+SRA10,
data=dat)[,-1]
x<-as.matrix(xfactors)
x<-model.matrix(donated~., data=dat)
y<-dat$donated
cv.out<-cv.glmnet(x,y,alpha=1, family="binomial", type.measure="mse")
#plot(cv.out)
lambda_min<-cv.out$lambda.min
lambda_1se<-cv.out$lambda.1se
coef(cv.out,s=lambda_1se)
coef(cv.out,s=lambda_min)
m<-glm(donated~alpha+UG1+UG2+TG1+TG2+PGG+SRAtotal,
data=data)
stargazer(m, type="latex")
dat<-data[,c("donated", "alpha", "rho", "UG1", "UG2",
"TG1", "TG2", "avgreturn", "PGG", "SRA1", "SRA2",
"SRA3", "SRA4", "SRA5", "SRA6", "SRA7", "SRA8", "SRA9", "SRA10")]
dat$donated<-as.factor(dat$donated)
dat[,"train"]<-ifelse(runif(nrow(dat))<0.8,1,0)
trainset<-dat[dat$train==1,]
testset<-dat[dat$train==0,]
trainColNum<-grep("train",names(trainset))
trainset<-trainset[,-trainColNum]
testset<-testset[,-trainColNum]
typeColNum<-grep("donated",names(dat))
glm_model<-glm(donated~.,data=trainset,family=binomial)
summary(glm_model)
glm_prob<-predict.glm(glm_model,testset[,-typeColNum],type="response")
#contrasts(dat$donated)
glm_predict<-rep("neg",nrow(testset))
glm_predict[glm_prob<.5]<-"pos"
table(pred=glm_predict,true=testset$donated)
mean(glm_predict==testset$donated)
x<-model.matrix(donated~.,trainset)
y<-trainset$donated
cv.out<-cv.glmnet(x,y,alpha=1,family="binomial",
type.measure="mse")
#plot(cv.out)
lambda_min<-cv.out$lambda.min
lambda_1se<-cv.out$lambda.1se
coef(cv.out,s=lambda_1se)
coef(cv.out,s=lambda_min)
set<-data[,c("donated", "alpha", "rho", "UG1", "UG2",
"TG1", "TG2", "avgreturn", "PGG", "SRA1",
"SRA2", "SRA3", "SRA4", "SRA5", "SRA6",
"SRA7", "SRA8", "SRA9", "SRA10")]
x<-model.matrix(donated~.,set)
y<-set$donated
cv.out<-cv.glmnet(x,y,alpha=1,family="binomial",
type.measure="mse")
#plot(cv.out)
lambda_min<-cv.out$lambda.min
lambda_1se<-cv.out$lambda.1se
coef(cv.out,s=lambda_1se)
coef(cv.out,s=lambda_min)
install.packages('lars')
library(lars)
install.packages('covTest')
library(covTest)
x<-model.matrix(donated~.,set)[,-1]
y<-set$donated
cv.out<-cv.glmnet(x,y,alpha=1,family="binomial",
type.measure="mse")
#plot(cv.out)
lambda_min<-cv.out$lambda.min
lambda_1se<-cv.out$lambda.1se
coef(cv.out,s=lambda_1se)
coef(cv.out,s=lambda_min)
m<-lars(x,y,type="lasso")
covTest(m,x,y)
summary(m)
summary.lars(m)
set<-data[,c("donations", "alpha", "rho", "UG1", "UG2",
"TG1", "TG2", "avgreturn", "PGG", "SRA1",
"SRA2", "SRA3", "SRA4", "SRA5", "SRA6",
"SRA7", "SRA8", "SRA9", "SRA10")]
x<-model.matrix(donations~.,set)
y<-set$donations
cv.out<-cv.glmnet(x,y,alpha=1,family="gaussian",
type.measure="mse")
#plot(cv.out)
lambda_min<-cv.out$lambda.min
lambda_1se<-cv.out$lambda.1se
coef(cv.out,s=lambda_1se)
coef(cv.out,s=lambda_min)
#get test data
x_test <- model.matrix(donated~.,testset)
#predict class, type=”class”
lasso_prob <- predict(cv.out,newx = x_test,s=lambda_min,type="response")
#translate probabilities to predictions
lasso_predict <- rep("neg",nrow(testset))
lasso_predict[lasso_prob>.5] <- "pos"
#confusion matrix
table(pred=lasso_predict,true=testset$donated)
mean(lasso_predict==testset$donated)
